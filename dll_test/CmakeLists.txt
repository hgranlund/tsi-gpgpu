# Append current NVCC flags by something, eg comput capability

include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}

  )

include (GenerateExportHeader)

set(HFILES_PUBLIC
  hello.h
  )

set(GENCODE_SM10 -gencode=arch=compute_10,code=sm_10 -gencode=arch=compute_10,code=compute_10)
set(GENCODE_SM13 -gencode=arch=compute_13,code=sm_13 -gencode=arch=compute_13,code=compute_13)
set(GENCODE_SM20 -gencode=arch=compute_20,code=sm_20 -gencode=arch=compute_20,code=compute_20)
set(GENCODE_SM30 -gencode=arch=compute_30,code=sm_30 -gencode=arch=compute_30,code=compute_30)
set(GENCODE_SM35 -gencode=arch=compute_35,code=sm_35 -gencode=arch=compute_35,code=compute_35)


source_group("CUDA Source Files" FILES ${CUFILES})
source_group("CUDA Header Files" FILES ${CUHFILES})

set(GENCODE -gencode=arch=compute_20,code=sm_20 -gencode=arch=compute_20,code=compute_20)
# set(GENCODE -gencode=arch=compute_10,code=compute_10) # at least generate PTX

option(CUDPP_GENCODE_SM10
       "ON to generate code for Compute Capability 1.0 devices (e.g. Tesla C870)"
       OFF)

option(CUDPP_GENCODE_SM13
       "ON to generate code for Compute Capability 1.3 devices (e.g. Tesla C1060)"
       OFF)

option(CUDPP_GENCODE_SM20
       "ON to generate code for Compute Capability 2.0 devices (e.g. Tesla C2050)"
       ON)

option(CUDPP_GENCODE_SM30
       "ON to generate code for Compute Capability 3.0 devices (e.g. Tesla K10)"
       OFF)

option(CUDPP_GENCODE_SM35
       "ON to generate code for Compute Capability 3.5 devices (e.g. Tesla K20)"
       OFF)

if (CUDPP_GENCODE_SM10)
  set(GENCODE ${GENCODE} ${GENCODE_SM10})
endif(CUDPP_GENCODE_SM10)

if (CUDPP_GENCODE_SM13)
  set(GENCODE ${GENCODE} ${GENCODE_SM13})
endif(CUDPP_GENCODE_SM13)

if (CUDPP_GENCODE_SM20)
  set(GENCODE ${GENCODE} ${GENCODE_SM20})
endif(CUDPP_GENCODE_SM20)

if (CUDPP_GENCODE_SM30)
  set(GENCODE ${GENCODE} ${GENCODE_SM30})
endif(CUDPP_GENCODE_SM30)

if (CUDPP_GENCODE_SM35)
  set(GENCODE ${GENCODE} ${GENCODE_SM35})
endif(CUDPP_GENCODE_SM35)

if (CUDA_VERBOSE_PTXAS)
  set(VERBOSE_PTXAS --ptxas-options=-v)
endif (CUDA_VERBOSE_PTXAS)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

cuda_add_library(hello ${LIB_TYPE}
  hello.cu
  hello.h
  OPTIONS ${GENCODE} ${VERBOSE_PTXAS}
  )


# GENERATE_EXPORT_HEADER( hello
#              BASE_NAME hello
#              EXPORT_MACRO_NAME hello_EXPORT
#              EXPORT_FILE_NAME hello_Export.h
#              STATIC_DEFINE hello_BUILT_AS_STATIC
# )



generate_export_header(hello)
install(TARGETS hello DESTINATION lib)
install(FILES
 hello.h
 hello.cu
 ${PROJECT_BINARY_DIR}/hello_export.h DESTINATION include
)

install(EXPORT hello
  DESTINATION lib
  )
# install(FILES hello.h
#   DESTINATION include
#   )

# install(TARGETS hello
#   DESTINATION lib
#   EXPORT hello-targets
#   )

# install(EXPORT hello-targets
#   DESTINATION lib
#   )

  # add_executable(hello_world
  #   hello_world.c
  # )

  # target_link_libraries(hello_world hello)
  # add_custom_target(hello-world hello_world)


